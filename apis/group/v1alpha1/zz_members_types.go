/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MembersMembersObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type MembersMembersParameters struct {

	// Defaults to `ALL_MAIL`. Defines mail delivery preferences of member. Acceptable values are:
	// - `ALL_MAIL`: All messages, delivered as soon as they arrive.
	// - `DAILY`: No more than one message a day.
	// - `DIGEST`: Up to 25 messages bundled into a single message.
	// - `DISABLED`: Remove subscription.
	// - `NONE`: No messages.
	// +kubebuilder:validation:Optional
	DeliverySettings *string `json:"deliverySettings,omitempty" tf:"delivery_settings,omitempty"`

	// The member's email address. A member can be a user or another group. This property isrequired when adding a member to a group. The email must be unique and cannot be an alias of another group. If the email address is changed, the API automatically reflects the email address changes.
	// +kubebuilder:validation:Required
	Email *string `json:"email" tf:"email,omitempty"`

	// Defaults to `MEMBER`. The member's role in a group. The API returns an error for cycles in group memberships. For example, if group1 is a member of group2, group2 cannot be a member of group1. Acceptable values are:
	// - `MANAGER`: This role is only available if the Google Groups for Business is enabled using the Admin Console. A `MANAGER` role can do everything done by an `OWNER` role except make a member an `OWNER` or delete the group. A group can have multiple `MANAGER` members.
	// - `MEMBER`: This role can subscribe to a group, view discussion archives, and view the group's membership list.
	// - `OWNER`: This role can send messages to the group, add or remove members, change member roles, change group's settings, and delete the group. An OWNER must be a member of the group. A group can have more than one OWNER.
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Defaults to `USER`. The type of group member. Acceptable values are:
	// - `CUSTOMER`: The member represents all users in a domain. An email address is not returned and the ID returned is the customer ID.
	// - `GROUP`: The member is another group.
	// - `USER`: The member is a user.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type MembersObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MembersParameters struct {

	// Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.
	// +crossplane:generate:reference:type=Group
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// +kubebuilder:validation:Optional
	GroupIDRef *v1.Reference `json:"groupIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	GroupIDSelector *v1.Selector `json:"groupIdSelector,omitempty" tf:"-"`

	// The members of the group
	// +kubebuilder:validation:Optional
	Members []MembersMembersParameters `json:"members,omitempty" tf:"members,omitempty"`
}

// MembersSpec defines the desired state of Members
type MembersSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MembersParameters `json:"forProvider"`
}

// MembersStatus defines the observed state of Members.
type MembersStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MembersObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Members is the Schema for the Memberss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,googleworkspacejet}
type Members struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MembersSpec   `json:"spec"`
	Status            MembersStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MembersList contains a list of Memberss
type MembersList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Members `json:"items"`
}

// Repository type metadata.
var (
	Members_Kind             = "Members"
	Members_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Members_Kind}.String()
	Members_KindAPIVersion   = Members_Kind + "." + CRDGroupVersion.String()
	Members_GroupVersionKind = CRDGroupVersion.WithKind(Members_Kind)
)

func init() {
	SchemeBuilder.Register(&Members{}, &MembersList{})
}
